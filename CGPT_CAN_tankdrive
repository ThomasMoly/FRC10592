package frc.robot;

import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.SpeedControllerGroup;

// Legacy REVLib imports
import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;

public class Robot extends TimedRobot {

    // Constants for speeds and durations
    private static final double AUTO_SPEED = 0.6;
    private static final double TELEOP_SPEED_SCALING = 0.6;
    private static final double TURN_SCALING = 0.3;
    private static final double AUTO_DURATION = 3.0;

    // Instantiate four SparkMax motor controllers for brushed motors.
    // Mapping: Right Motors: IDs 1 and 2, Left Motors: IDs 3 and 4.
    private CANSparkMax rightMotor1 = new CANSparkMax(1, MotorType.kBrushed);
    private CANSparkMax rightMotor2 = new CANSparkMax(2, MotorType.kBrushed);
    private CANSparkMax leftMotor1  = new CANSparkMax(3, MotorType.kBrushed);
    private CANSparkMax leftMotor2  = new CANSparkMax(4, MotorType.kBrushed);

    // Group left and right motors.
    private SpeedControllerGroup leftMotors = new SpeedControllerGroup(leftMotor1, leftMotor2);
    private SpeedControllerGroup rightMotors = new SpeedControllerGroup(rightMotor1, rightMotor2);

    // Differential drive for arcade control.
    private DifferentialDrive drive = new DifferentialDrive(leftMotors, rightMotors);

    // Joystick for teleop (port 0)
    private Joystick joy1 = new Joystick(0);
    
    private double startTime;

    @Override
    public void robotInit() {
        // Invert right side if needed so a positive input moves the robot forward.
        drive.setRightSideInverted(true);
    }

    @Override
    public void autonomousInit() {
        startTime = Timer.getFPGATimestamp();
    }

    @Override
    public void autonomousPeriodic() {
        double time = Timer.getFPGATimestamp();
        if (time - startTime < AUTO_DURATION) {
            drive.arcadeDrive(AUTO_SPEED, 0.0);
        } else {
            drive.arcadeDrive(0.0, 0.0);
        }
    }

    @Override
    public void teleopPeriodic() {
        double speed = applyDeadband(-joy1.getRawAxis(1), 0.05) * TELEOP_SPEED_SCALING;
        double turn = applyDeadband(joy1.getRawAxis(4), 0.05) * TURN_SCALING;
        drive.arcadeDrive(speed, turn);
    }

    private double applyDeadband(double value, double threshold) {
        return (Math.abs(value) > threshold) ? value : 0.0;
    }
}
